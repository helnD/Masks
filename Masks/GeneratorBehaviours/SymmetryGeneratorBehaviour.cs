///////////////////////////////////////////////////////////
//  SymmetryGeneratorBehaviour.cs
//  Implementation of the Class SymmetryGeneratorBehaviour
//  Generated by Enterprise Architect
//  Created on:      20-���-2019 10:46:22
//  Original author: Heln
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;


namespace Domain
{
	public class SymmetryGeneratorBehaviour : IGeneratorBehaviour
    {
	    public Mask Generate()
        {
            int x = 2;
            int y = 2;
            int numberOfColumns = 5;
            int maxValue = 1000;
            int minValue = -999;

            Random rnd = new Random();
            Mask mask = new Mask(new List<MaskPixel>(), new MaskPixel(), new MaskPixel());

            for (int i = 0; i < (numberOfColumns / 2) + 1; i++)
            {
                for (int j = 0; j < i + 1; j++)
                {
                    int rndNumber = rnd.Next(minValue, maxValue);
                    if (i != x || j != y)
                    {
                        mask.Pixels.AddRange(new List<MaskPixel>
                        {
                            new MaskPixel(i, j, rndNumber),
                            new MaskPixel(numberOfColumns - i - 1, numberOfColumns - j - 1, rndNumber)
                        });
                        if (i != numberOfColumns - i - 1 && j != numberOfColumns - j - 1)
                        {
                            mask.Pixels.AddRange(new List<MaskPixel>
                            {
                                new MaskPixel(numberOfColumns - i - 1, j, rndNumber),
                                new MaskPixel(i, numberOfColumns - j - 1, rndNumber)
                            });
                        }
                        if (i != j)
                        {
                            mask.Pixels.AddRange(new List<MaskPixel>
                            {
                                new MaskPixel(j, i, rndNumber),
                                new MaskPixel(numberOfColumns - j - 1, numberOfColumns - i - 1, rndNumber)
                            });
                            if (i != numberOfColumns - i - 1 && j != numberOfColumns - j - 1)
                            {
                                mask.Pixels.AddRange(new List<MaskPixel>
                                {
                                    new MaskPixel(numberOfColumns - j - 1, i, rndNumber),
                                    new MaskPixel(j, numberOfColumns - i - 1, rndNumber)
                                });
                            }
                        }
                    }
                    else if (i == x && j == y)
                    {
                        mask.Pixels.Add(new MaskPixel(i, j, rndNumber));
                        mask.CentralMaskPixel = new MaskPixel(i, j, rndNumber);
                        mask.SymmetryCenter = new MaskPixel(i, j, rndNumber);
                    }
                }
            }
            mask.Pixels = mask.Pixels.Select(pixel => pixel.X -= x).Select(pixel => pixel.Y -= y);

            return mask;
		}
	}
} 